// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
}

enum USER_TYPE {
  STUDENT // öğrenci
  COMISSION // Komisyon üyesi
  ADMIN // Yetkili (Admin)
}

enum INTERN_STATUS {
  START
  DOING
  END
}

model User {
  id String @id @default(uuid())

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  createdby String?

  isDeleted Boolean @default(false)

  email     String @unique
  password  String
  name      String
  last_name String

  user_type USER_TYPE @default(STUDENT)

  tc_number           String?
  student_id          String?
  refreshToken        String[]
  passwordChangeToken String   @default("")

  follow_up InternForm[] @relation("follow_up")
  student   InternForm[] @relation("student")

  comission      Interview[]    @relation("comission")
  intern_student Interview[]    @relation("intern_student")
  InternStatus   InternStatus[] @relation("intern_status_student")

  internFormCreated InternForm[] @relation("CreatedByRelation")
  internFormUpdated InternForm[] @relation("UpdatedByRelation")

  InternStatusCreated InternStatus[] @relation("CreatedByRelation")
  InternStatusUpdated InternStatus[] @relation("UpdatedByRelation")

  InterviewCreated Interview[] @relation("CreatedByRelation")
  InterviewUpdated Interview[] @relation("UpdatedByRelation")

  SurveyCreated Survey[] @relation("CreatedByRelation")
  SurveyUpdated Survey[] @relation("UpdatedByRelation")

  ConfidentalReportCreated ConfidentalReport[] @relation("CreatedByRelation")
  ConfidentalReportUpdated ConfidentalReport[] @relation("UpdatedByRelation")
}

model InternForm {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User    @relation("CreatedByRelation", fields: [createdById], references: [id])
  createdById String
  updatedBy   User?   @relation("UpdatedByRelation", fields: [updatedById], references: [id])
  updatedById String?

  isDeleted Boolean @default(false)
  isSealed  Boolean @default(false)

  start_date     DateTime
  end_date       DateTime
  total_work_day Int
  edu_year       String // Sonradan bu alan foreign key olabilir
  edu_program    String   @default("Bilgisayar Mühendisliği")
  edu_faculty    String   @default("Mühendislik Fakültesi")

  student    User?   @relation("student", fields: [student_id], references: [id])
  student_id String?

  follow_up    User?   @relation("follow_up", fields: [follow_up_id], references: [id])
  follow_up_id String?

  student_info    StudentInfo? @relation(fields: [student_info_id], references: [id], onDelete: Cascade)
  student_info_id String?      @unique

  company_info    CompanyInfo?  @relation(fields: [company_info_id], references: [id], onDelete: Cascade)
  company_info_id String?       @unique
  InternStatus    InternStatus?
}

model StudentInfo {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  isSealed  Boolean  @default(false)

  fathers_name String
  mothers_name String

  birth_place String
  birth_date  DateTime

  address    String
  InternForm InternForm?
}

model CompanyInfo {
  id String @id @default(uuid())

  createdAt DateTime @default(now())
  isSealed  Boolean  @default(false)

  name         String
  address      String
  phone        String
  fax          String
  email        String
  service_area String
  InternForm   InternForm?
}

model InternStatus {
  id String @id @default(uuid())

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  createdBy   User    @relation("CreatedByRelation", fields: [createdById], references: [id])
  createdById String
  updatedBy   User?   @relation("UpdatedByRelation", fields: [updatedById], references: [id])
  updatedById String?

  isDeleted Boolean @default(false)
  isSealed  Boolean @default(false)

  user    User?   @relation("intern_status_student", fields: [user_id], references: [id])
  user_id String? @unique

  interview    Interview? @relation(fields: [interview_id], references: [id])
  interview_id String?    @unique

  form    InternForm? @relation(fields: [form_id], references: [id])
  form_id String?     @unique

  status INTERN_STATUS @default(START)
}

model Interview {
  id String @id @default(uuid())

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  createdBy   User    @relation("CreatedByRelation", fields: [createdById], references: [id])
  createdById String
  updatedBy   User?   @relation("UpdatedByRelation", fields: [updatedById], references: [id])
  updatedById String?

  isDeleted Boolean @default(false)
  isSealed  Boolean @default(false)

  date DateTime

  intern    User?   @relation("intern_student", fields: [intern_id], references: [id])
  intern_id String?

  comission    User?         @relation("comission", fields: [comission_id], references: [id])
  comission_id String?
  InternStatus InternStatus?
}

model Survey {
  id String @id @default(uuid())

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  createdBy   User    @relation("CreatedByRelation", fields: [createdById], references: [id])
  createdById String
  updatedBy   User?   @relation("UpdatedByRelation", fields: [updatedById], references: [id])
  updatedById String?

  isDeleted Boolean @default(false)

  company_name    String
  company_address String

  teach_type   String // maybe Enum
  gano         String // maybe Enum
  intern_group String // maybe Enum
  intern_type  String // maybe Enum

  date    DateTime
  answers Json
}

model ConfidentalReport {
  id String @id @default(uuid())

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  createdBy   User    @relation("CreatedByRelation", fields: [createdById], references: [id])
  createdById String
  updatedBy   User?   @relation("UpdatedByRelation", fields: [updatedById], references: [id])
  updatedById String?

  isDeleted    Boolean @default(false)
  isMailSended Boolean @default(false)

  student_id String

  company_name String
  address      String

  start_date      DateTime
  end_date        DateTime
  days_of_absence Int
  department      String
  is_edu_program  Boolean

  intern_evaluation Json

  auth_name      String
  auth_position  String
  reg_number     String
  auth_tc_number String
  auth_title     String
}

model Holidays {
  id   String   @id @default(uuid())
  date DateTime
}
